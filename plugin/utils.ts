import isURL from "validator/lib/isURL";
import {getEnv} from "adnbn";

import {RemoteConfigContract} from "./types";

export const getConfigOptions = (): { url?: string, ttl: number, config: RemoteConfigContract } => {
    //@ts-expect-error: __REMOTE_CONFIG_OPTIONS__ is a virtual variable generated by the bundler `plugin/index.ts`
    const {url, ttl = 1440, config = {}} = __REMOTE_CONFIG_OPTIONS__;

    return {ttl, config, url: isURL(url) ? url : getEnv(url)};
};

export const sleep = (time: number): Promise<void> => {
    return new Promise((resolve) => setTimeout(resolve, time));
};

export const awaiter = async (check: () => boolean, retryTime: number = 150, timeFallback: number = 3000): Promise<void> => {
    let isTimeOut = false;

    const timeoutId = setTimeout(() => {
        isTimeOut = true;
    }, timeFallback);

    try {
        while (check()) {
            if (isTimeOut) {
                throw new Error(`Awaiter: Timed out â€” ${timeFallback} ms exceeded`);
            }
            await sleep(retryTime);
        }
    } finally {
        clearTimeout(timeoutId);
    }
};